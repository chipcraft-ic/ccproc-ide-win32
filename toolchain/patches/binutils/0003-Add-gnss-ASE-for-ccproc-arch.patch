From 81c9e0ff947f16b051d3a15d0b224dd1b18914ad Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Rafa=C5=82=20Harabie=C5=84?= <rafalh1992@o2.pl>
Date: Wed, 25 Apr 2018 15:25:57 +0200
Subject: Add gnss ASE for ccproc arch.

---
 binutils/doc/binutils.texi      |  3 ++
 binutils/readelf.c              |  2 +
 gas/config/tc-mips.c            | 15 +++++++
 gas/doc/as.texinfo              |  7 +++
 gas/doc/c-mips.texi             | 13 ++++++
 gas/testsuite/gas/mips/gnss.d   | 10 +++++
 gas/testsuite/gas/mips/gnss.s   |  4 ++
 gas/testsuite/gas/mips/mips.exp |  2 +
 include/elf/mips.h              |  3 +-
 include/opcode/mips.h           |  2 +
 opcodes/mips-dis.c              | 13 +++++-
 opcodes/mips-opc.c              | 75 +++++++++++++++++++++++++++++++++
 12 files changed, 147 insertions(+), 2 deletions(-)
 create mode 100644 gas/testsuite/gas/mips/gnss.d
 create mode 100644 gas/testsuite/gas/mips/gnss.s

diff --git a/binutils/doc/binutils.texi b/binutils/doc/binutils.texi
index 0a2c4c6a..9cb13cbe 100644
--- a/binutils/doc/binutils.texi
+++ b/binutils/doc/binutils.texi
@@ -2341,6 +2341,9 @@ Disassemble the virtualization ASE instructions.
 @item xpa
 Disassemble the eXtended Physical Address (XPA) ASE instructions.
 
+@item gnss
+Disassemble the GNSS-ISE instructions.
+
 @item gpr-names=@var{ABI}
 Print GPR (general-purpose register) names as appropriate
 for the specified ABI.  By default, GPR names are selected according to
diff --git a/binutils/readelf.c b/binutils/readelf.c
index 8dca4902..df8ed393 100644
--- a/binutils/readelf.c
+++ b/binutils/readelf.c
@@ -14545,6 +14545,8 @@ print_mips_ases (unsigned int mask)
     fputs ("\n\tMICROMIPS ASE", stdout);
   if (mask & AFL_ASE_XPA)
     fputs ("\n\tXPA ASE", stdout);
+  if (mask & AFL_ASE_GNSS)
+    fputs ("\n\tGNSS", stdout);
   if (mask == 0)
     fprintf (stdout, "\n\t%s", _("None"));
   else if ((mask & ~AFL_ASE_MASK) != 0)
diff --git a/gas/config/tc-mips.c b/gas/config/tc-mips.c
index e24e84df..4d230b9f 100644
--- a/gas/config/tc-mips.c
+++ b/gas/config/tc-mips.c
@@ -1428,6 +1428,8 @@ enum options
     OPTION_NO_EVA,
     OPTION_XPA,
     OPTION_NO_XPA,
+    OPTION_GNSS,
+    OPTION_NO_GNSS,
     OPTION_MICROMIPS,
     OPTION_NO_MICROMIPS,
     OPTION_MCU,
@@ -1552,6 +1554,8 @@ struct option md_longopts[] =
   {"mno-msa", no_argument, NULL, OPTION_NO_MSA},
   {"mxpa", no_argument, NULL, OPTION_XPA},
   {"mno-xpa", no_argument, NULL, OPTION_NO_XPA},
+  {"mgnss", no_argument, NULL, OPTION_GNSS},
+  {"mno-gnss", no_argument, NULL, OPTION_NO_GNSS},
 
   /* Old-style architecture options.  Don't add more of these.  */
   {"m4650", no_argument, NULL, OPTION_M4650},
@@ -1734,6 +1738,11 @@ static const struct mips_ase mips_ases[] = {
     OPTION_XPA, OPTION_NO_XPA,
      2,  2, -1, -1,
     -1 },
+
+  { "gnss", ASE_GNSS, 0,
+    OPTION_GNSS, OPTION_NO_GNSS,
+    0, 0, -1, -1,
+    -1 },
 };
 
 /* The set of ASEs that require -mfp64.  */
@@ -18649,6 +18658,8 @@ mips_convert_ase_flags (int ase)
     ext_ases |= AFL_ASE_MSA;
   if (ase & ASE_XPA)
     ext_ases |= AFL_ASE_XPA;
+  if (ase & ASE_GNSS)
+    ext_ases |= AFL_ASE_GNSS;
 
   return ext_ases;
 }
@@ -19280,6 +19291,7 @@ static const struct mips_cpu_info mips_cpu_info_table[] =
 
   /* MIPS II */
   { "r6000",          0, 0,			ISA_MIPS2,    CPU_R6000 },
+  { "ccproc",           0, ASE_GNSS,	ISA_MIPS2,    CPU_CCPROC },
 
   /* MIPS III */
   { "r4000",          0, 0,			ISA_MIPS3,    CPU_R4000 },
@@ -19659,6 +19671,9 @@ MIPS options:\n\
 -mvirt			generate Virtualization instructions\n\
 -mno-virt		do not generate Virtualization instructions\n"));
   fprintf (stream, _("\
+-mgnss			generate GNSS-ISE instructions\n\
+-mno-gnss		do not generate GNSS-ISE instructions\n"));
+  fprintf (stream, _("\
 -minsn32		only generate 32-bit microMIPS instructions\n\
 -mno-insn32		generate all microMIPS instructions\n"));
   fprintf (stream, _("\
diff --git a/gas/doc/as.texinfo b/gas/doc/as.texinfo
index 518b38b9..9366a1bd 100644
--- a/gas/doc/as.texinfo
+++ b/gas/doc/as.texinfo
@@ -429,6 +429,7 @@ gcc(1), ld(1), and the Info entries for @file{binutils} and @file{ld}.
    [@b{-mdspr3}] [@b{-mno-dspr3}]
    [@b{-mmsa}] [@b{-mno-msa}]
    [@b{-mxpa}] [@b{-mno-xpa}]
+   [@b{-mgnss}] [@b{-mno-gnss}]
    [@b{-mmt}] [@b{-mno-mt}]
    [@b{-mmcu}] [@b{-mno-mcu}]
    [@b{-minsn32}] [@b{-mno-insn32}]
@@ -1486,6 +1487,12 @@ Generate code for the MIPS eXtended Physical Address (XPA) Extension.
 This tells the assembler to accept XPA instructions.
 @samp{-mno-xpa} turns off this option.
 
+@item -mgnss
+@itemx -mno-gnss
+Generate code for the GNSS-ISE.
+This tells the assembler to accept GNSS-ISE instructions.
+@samp{-mno-gnss} turns off this option.
+
 @item -mmt
 @itemx -mno-mt
 Generate code for the MT Application Specific Extension.
diff --git a/gas/doc/c-mips.texi b/gas/doc/c-mips.texi
index d9a09f19..90827811 100644
--- a/gas/doc/c-mips.texi
+++ b/gas/doc/c-mips.texi
@@ -222,6 +222,12 @@ Generate code for the MIPS eXtended Physical Address (XPA) Extension.
 This tells the assembler to accept XPA instructions.
 @samp{-mno-xpa} turns off this option.
 
+@item -mgnss
+@itemx -mno-gnss
+Generate code for the GNSS-ISE.
+This tells the assembler to accept GNSS-ISE instructions.
+@samp{-mno-gnss} turns off this option.
+
 @item -mvirt
 @itemx -mno-virt
 Generate code for the Virtualization Application Specific Extension.
@@ -981,6 +987,13 @@ Note that @sc{gnu} @code{@value{AS}} does not produce NaNs itself and
 therefore these directives do not affect code generation.  They simply
 control the setting of the @code{EF_MIPS_NAN2008} flag.
 
+@cindex GNSS-ISE instruction generation override
+@kindex @code{.set gnss}
+@kindex @code{.set nognss}
+The directive @code{.set gnss} makes the assembler accept instructions
+from the GNSS-ISE from that point on in the assembly.  The
+@code{.set nognss} directive prevents GNSS-ISE instructions from being accepted.
+
 Traditional MIPS assemblers do not support these directives.
 
 @node MIPS Option Stack
diff --git a/gas/testsuite/gas/mips/gnss.d b/gas/testsuite/gas/mips/gnss.d
new file mode 100644
index 00000000..222c6600
--- /dev/null
+++ b/gas/testsuite/gas/mips/gnss.d
@@ -0,0 +1,10 @@
+#objdump: -dr --prefix-addresses
+#name: GNSS-ISE
+#as: -32
+
+# Test the add macro.
+
+.*: +file format .*mips.*
+
+Disassembly of section .text:
+0+0000 <[^>]*> nop
diff --git a/gas/testsuite/gas/mips/gnss.s b/gas/testsuite/gas/mips/gnss.s
new file mode 100644
index 00000000..975bea6f
--- /dev/null
+++ b/gas/testsuite/gas/mips/gnss.s
@@ -0,0 +1,4 @@
+# Source file used to test GNSS-ISE.
+
+foo:
+	nop
diff --git a/gas/testsuite/gas/mips/mips.exp b/gas/testsuite/gas/mips/mips.exp
index 78eec0d1..9381c337 100644
--- a/gas/testsuite/gas/mips/mips.exp
+++ b/gas/testsuite/gas/mips/mips.exp
@@ -1450,6 +1450,8 @@ if { [istarget mips*-*-vxworks*] } {
     run_list_test_arches "lui-1" "-32"	[mips_arch_list_matching mips1]
     run_list_test_arches "lui-2" "-32"	[mips_arch_list_matching mips1]
 
+    run_dump_test_arches "gnss"		[mips_arch_list_matching mips1]
+
     run_dump_test "r5900"
     run_dump_test "r5900-full"
     run_list_test "r5900-nollsc" "-mabi=o64 -march=r5900"
diff --git a/include/elf/mips.h b/include/elf/mips.h
index 3e27b051..c24a70b5 100644
--- a/include/elf/mips.h
+++ b/include/elf/mips.h
@@ -1233,7 +1233,8 @@ extern void bfd_mips_elf_swap_abiflags_v0_out
 #define AFL_ASE_MICROMIPS    0x00000800 /* MICROMIPS ASE.  */
 #define AFL_ASE_XPA          0x00001000 /* XPA ASE.  */
 #define AFL_ASE_DSPR3        0x00002000 /* DSP R3 ASE.  */
-#define AFL_ASE_MASK         0x00003fff /* All ASEs.  */
+#define AFL_ASE_GNSS         0x00004000 /* GNSS ASE.  */
+#define AFL_ASE_MASK         0x00007fff /* All ASEs.  */
 
 /* Values for the isa_ext word of an ABI flags structure.  */
 
diff --git a/include/opcode/mips.h b/include/opcode/mips.h
index 3426a731..59a9ffd8 100644
--- a/include/opcode/mips.h
+++ b/include/opcode/mips.h
@@ -1274,6 +1274,8 @@ static const unsigned int mips_isa_table[] = {
 #define ASE_XPA			0x00002000
 /* DSP R3 Module.  */
 #define ASE_DSPR3		0x00004000
+/* GNSS-ISE  */
+#define ASE_GNSS		0x00008000
 
 /* MIPS ISA defines, use instead of hardcoding ISA level.  */
 
diff --git a/opcodes/mips-dis.c b/opcodes/mips-dis.c
index 20ead650..b05fa69b 100644
--- a/opcodes/mips-dis.c
+++ b/opcodes/mips-dis.c
@@ -656,7 +656,7 @@ const struct mips_arch_choice mips_arch_choices[] =
     mips_cp0sel_names_xlr, ARRAY_SIZE (mips_cp0sel_names_xlr),
     mips_cp1_names_mips3264, mips_hwr_names_numeric },
 
-  { "ccproc",	1, bfd_mach_mips_ccproc, CPU_CCPROC, ISA_MIPS2, 0,
+  { "ccproc",	1, bfd_mach_mips_ccproc, CPU_CCPROC, ISA_MIPS2, ASE_GNSS,
     mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
     mips_hwr_names_numeric },
 
@@ -799,6 +799,8 @@ mips_convert_abiflags_ases (unsigned long afl_ases)
     opcode_ases |= ASE_XPA;
   if (afl_ases & AFL_ASE_DSPR3)
     opcode_ases |= ASE_DSPR3;
+  if (afl_ases & AFL_ASE_GNSS)
+    opcode_ases |= ASE_GNSS;
   return opcode_ases;
 }
 
@@ -916,6 +918,12 @@ parse_mips_dis_option (const char *option, unsigned int len)
       return;
     }
 
+  if (CONST_STRNEQ (option, "gnss"))
+    {
+      mips_ase |= ASE_GNSS;
+      return;
+    }
+
 
   /* Look for the = that delimits the end of the option name.  */
   for (i = 0; i < len; i++)
@@ -2447,6 +2455,9 @@ with the -M switch (multiple options should be separated by commas):\n"));
   xpa                      Recognize the eXtended Physical Address (XPA)\n\
                            ASE instructions.\n"));
 
+  fprintf (stream, _("\n\
+  gnss                     Recognize the GNSS-ISE.\n"));
+
   fprintf (stream, _("\n\
   gpr-names=ABI            Print GPR names according to specified ABI.\n\
                            Default: based on binary being disassembled.\n"));
diff --git a/opcodes/mips-opc.c b/opcodes/mips-opc.c
index 5cb8e736..31c8fa5e 100644
--- a/opcodes/mips-opc.c
+++ b/opcodes/mips-opc.c
@@ -290,6 +290,9 @@ decode_mips_operand (const char *p)
 #define I4_33   INSN_ISA4_32R2
 #define I5_33   INSN_ISA5_32R2
 
+/* GNSS-ISE support.  */
+#define GNSS     ASE_GNSS
+
 /* MIPS64 MIPS-3D ASE support.  */
 #define M3D     ASE_MIPS3D
 
@@ -437,6 +440,78 @@ const struct mips_opcode mips_builtin_opcodes[] =
 {"lapc",		"s,-A",		0xec000000, 0xfc180000, WR_1,			RD_pc,		I37,		0,	0 },
 {"la",			"t,A(b)",	0,    (int) M_LA_AB,	INSN_MACRO,		0,		I1,		0,	0 },
 
+/* GNSS-ISE specific instructions. GNSS-ISE redefines Coprocessor 2 instructions.
+   Put them here so that disassembler will find them first.
+   The assemblers uses a hash table based on the instruction name anyhow.  */
+
+{"gnss.chann.set",		"v",		0x48000089, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+{"gnss.chann.get",		"d",		0x48000086, 0xffff07ff,	WR_1,			0,		0,		GNSS,	0 },
+{"gnss.chann.incr",		"",			0x48000280, 0xffffffff,	0,				0,		0,		GNSS,	0 },
+
+{"gnss.carr.freq",		"v",		0x48000087, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+{"gnss.carr.freq.i",	"v",		0x48000287, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+{"gnss.carr.disc",		"d,v",		0x48000082, 0xfc1f07ff,	WR_1|RD_2,			0,		0,		GNSS,	0 },
+{"gnss.carr.disc.i",	"d,v",		0x48000282, 0xfc1f07ff,	WR_1|RD_2,			0,		0,		GNSS,	0 },
+{"gnss.carr.set",		"v,t",		0x48000003, 0xfc00ffff,	RD_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.carr.rem",		"d,v,t",	0x48000083, 0xfc0007ff,	WR_1|RD_2|RD_3,	0,		0,		GNSS,	0 },
+{"gnss.carr.rem.i",		"d,v,t",	0x48000283, 0xfc0007ff,	WR_1|RD_2|RD_3,	0,		0,		GNSS,	0 },
+
+{"gnss.accu.add",		"v,t",		0x48000004, 0xfc00ffff,	RD_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.accu.get",		"d",		0x48000084, 0xffff07ff,	WR_1,			0,		0,		GNSS,	0 },
+{"gnss.accu.get.i",		"d",		0x48000284, 0xffff07ff,	WR_1,			0,		0,		GNSS,	0 },
+
+{"gnss.pll.disc",		"d,v,t",	0x48000100, 0xfc0007ff,	WR_1|RD_2|RD_3,	0,		0,		GNSS,	0 },
+{"gnss.pll.cost",		"d,v,t",	0x48000101, 0xfc0007ff,	WR_1|RD_2|RD_3,	0,		0,		GNSS,	0 },
+
+{"gnss.dll.disc.a",		"v,t",		0x48000005, 0xfc00ffff,	RD_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.dll.disc.b",		"d,v,t",	0x48000105, 0xfc0007ff,	WR_1|RD_2|RD_3,	0,		0,		GNSS,	0 },
+
+{"gnss.pll.flt.rst",	"",			0x48000007, 0xffffffff,	0,				0,		0,		GNSS,	0 },
+{"gnss.pll.flt.coef",	"v,t",		0x48000006, 0xfc00ffff,	RD_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.pll.flt",		"d,v",		0x48000106, 0xfc1f07ff,	WR_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.pll.flt.i",		"d,v",		0x48000306, 0xfc1f07ff,	WR_1|RD_2,		0,		0,		GNSS,	0 },
+
+{"gnss.dll.flt.rst",	"",			0x48000009, 0xffffffff,	0,				0,		0,		GNSS,	0 },
+{"gnss.dll.flt.coef",	"v,t",		0x48000008, 0xfc00ffff,	RD_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.dll.flt",		"d,v",		0x48000108, 0xfc1f07ff,	WR_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.dll.flt.i",		"d,v",		0x48000308, 0xfc1f07ff,	WR_1|RD_2,		0,		0,		GNSS,	0 },
+
+{"gnss.pcode.addr.set",	"v,t",		0x4800000a, 0xfc00ffff,	RD_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.pcode.wr",		"v",		0x4800000b, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+{"gnss.pcode.len",		"v",		0x4800000c, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+
+{"gnss.scode.addr.set",	"v",		0x4800000f, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+{"gnss.scode.wr",		"v",		0x48000010, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+{"gnss.scode.len",		"v",		0x48000011, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+
+{"gnss.code.get",		"d",		0x4800008a, 0xffff07ff,	WR_1,			0,		0,		GNSS,	0 },
+{"gnss.code.get.i",		"d",		0x4800028a, 0xffff07ff,	WR_1,			0,		0,		GNSS,	0 },
+{"gnss.code.nco.freq",	"v,t",		0x4800000d, 0xfc00ffff,	RD_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.code.epl.freq",	"v,t",		0x4800000e, 0xfc00ffff,	RD_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.code.disc",		"d,v",		0x4800008b, 0xfc1f07ff,	WR_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.code.disc.i",	"d,v",		0x4800028b, 0xfc1f07ff,	WR_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.code.rng",		"d,v",		0x4800008c, 0xfc1f07ff,	WR_1|RD_2,			0,		0,		GNSS,	0 },
+{"gnss.code.rng.i",		"d,v",		0x4800028c, 0xfc1f07ff,	WR_1|RD_2,			0,		0,		GNSS,	0 },
+
+{"gnss.stat.wr",		"v",		0x48000001, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+{"gnss.stat.rd",		"d",		0x48000081, 0xffff07ff,	WR_1,			0,		0,		GNSS,	0 },
+
+{"gnss.afe.wr",			"v",		0x48000014, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+{"gnss.afe.rd",			"d",		0x4800008D, 0xffff07ff,	WR_1,			0,		0,		GNSS,	0 },
+
+{"gnss.free.accu.wr",	"v,t",		0x48000012,0xfc00ffff,	RD_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.free.accu.rd",	"d",		0x48000085, 0xffff07ff,	WR_1,			0,		0,		GNSS,	0 },
+
+{"gnss.free.update.wr",	"v",		0x48000013, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+{"gnss.free.update.rd",	"d",		0x48000088, 0xffff07ff,	WR_1,			0,		0,		GNSS,	0 },
+
+{"gnss.track.step",		"v",		0x48000002, 0xfc1fffff, RD_1,			0,		0,		GNSS,	0 },
+
+{"gnss.tst.0",			"v",		0x4800007f, 0xfc1fffff,	RD_1,			0,		0,		GNSS,	0 },
+{"gnss.tst.1",			"d,v",		0x480000ff, 0xfc1f07ff,	WR_1|RD_2,		0,		0,		GNSS,	0 },
+{"gnss.tst.2",			"d,v,t",	0x4800017f, 0xfc0007ff,	WR_1|RD_2|RD_3,	0,		0,		GNSS,	0 },
+
+
 /* Loongson specific instructions.  Loongson 3A redefines the Coprocessor 2
    instructions.  Put them here so that disassembler will find them first.
    The assemblers uses a hash table based on the instruction name anyhow.  */
-- 
2.17.1

